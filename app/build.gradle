apply plugin: 'com.android.application'

android {
    signingConfigs {
        release {
            storeFile file('D:\\Aplications\\PPO\\Lab1\\keystore.jks')
            storePassword '1111AAaa)'
            keyAlias = 'key'
            keyPassword '1111AAaa)'
        }
    }
    compileSdkVersion 28
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.example.lab1"
        minSdkVersion 22
        targetSdkVersion 28
        versionName = getVersionName()
        versionCode = getVersionCode(versionName)
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        signingConfig signingConfigs.release
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}

static def getVersionCode(def versionName) {
    def versions = versionName.split("\\.")
    if (versions.size() != 3)
        return 1
    return 1_000_000 * Integer.valueOf(versions[0]) +
            1_000 * Integer.valueOf(versions[1]) +
            1 * Integer.valueOf(versions[2])
}

static def getVersionName(){
    def tag = getLastTagName()
    def patch = getCommitsAfterLastTagCount(tag)
    return tag + '.' + patch
}

static def getLastTagName() {
    def gitDescribeQuery = "git describe --abbrev=0".execute()
    gitDescribeQuery.waitFor()
    return gitDescribeQuery.text.trim()
}

static def getCommitsAfterLastTagCount(def tagName) {
    def gitRevListQuery = "git rev-list ${tagName}..HEAD --count".execute()
    gitRevListQuery.waitFor()
    return gitRevListQuery.text.trim()
}